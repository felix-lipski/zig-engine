#version 330

// Input vertex attributes (from vertex shader)
in vec3 fragPosition;
in vec2 fragTexCoord;
in vec4 fragColor;
in vec3 fragNormal;

// Input uniform values
uniform sampler2D mask;
/* uniform vec4 colDiffuse; */
vec4 colDiffuse = vec4(1.0, 1.0, 1.0, 1.0);

out vec4 finalColor;

vec3 palettes2[88] = vec3[](
      vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.06640625, 0.19921875, 0.19921875),vec3(0.13281250, 0.33203125, 0.33203125),
      vec3(0.79687500, 0.13281250, 0.00000000), vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.39843750, 0.06640625, 0.00000000),vec3(0.79687500, 0.13281250, 0.00000000),
      vec3(0.46484375, 0.66406250, 0.00000000), vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.13281250, 0.46484375, 0.26562500),vec3(0.46484375, 0.66406250, 0.00000000),
      vec3(0.79687500, 0.73046875, 0.00000000), vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.53125000, 0.33203125, 0.00000000),vec3(0.79687500, 0.73046875, 0.00000000),
      vec3(0.00000000, 0.39843750, 0.99609375), vec3(0.06640625, 0.00000000, 0.53125000), vec3(0.00000000, 0.39843750, 0.99609375),vec3(0.59765625, 0.79687500, 0.86328125),
      vec3(0.92968750, 0.39843750, 0.00000000), vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.39843750, 0.06640625, 0.00000000),vec3(0.92968750, 0.39843750, 0.00000000),
      vec3(0.00000000, 0.66406250, 0.46484375), vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.00000000, 0.66406250, 0.46484375),vec3(0.46484375, 0.92968750, 0.66406250),
      vec3(0.99609375, 0.99609375, 0.86328125), vec3(0.26562500, 0.46484375, 0.66406250), vec3(0.59765625, 0.79687500, 0.86328125),vec3(0.99609375, 0.99609375, 0.86328125),
      vec3(0.26562500, 0.46484375, 0.66406250), vec3(0.06640625, 0.19921875, 0.19921875), vec3(0.13281250, 0.33203125, 0.33203125),vec3(0.26562500, 0.46484375, 0.66406250),
      vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.19921875, 0.13281250, 0.06640625),vec3(0.53125000, 0.33203125, 0.00000000),
      vec3(0.53125000, 0.33203125, 0.00000000), vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.53125000, 0.33203125, 0.00000000),vec3(0.86328125, 0.59765625, 0.19921875),
      vec3(0.86328125, 0.59765625, 0.19921875), vec3(0.13281250, 0.46484375, 0.26562500), vec3(0.46484375, 0.66406250, 0.00000000),vec3(0.79687500, 0.73046875, 0.00000000),
      vec3(0.39843750, 0.00000000, 0.99609375), vec3(0.00000000, 0.00000000, 0.26562500), vec3(0.06640625, 0.00000000, 0.53125000),vec3(0.39843750, 0.00000000, 0.99609375),
      vec3(0.79687500, 0.13281250, 0.66406250), vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.39843750, 0.06640625, 0.00000000),vec3(0.79687500, 0.13281250, 0.66406250),
      vec3(0.13281250, 0.46484375, 0.26562500), vec3(0.06640625, 0.19921875, 0.19921875), vec3(0.13281250, 0.33203125, 0.33203125),vec3(0.13281250, 0.46484375, 0.26562500),
      vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.06640625, 0.19921875, 0.19921875), vec3(0.13281250, 0.33203125, 0.33203125),vec3(0.00000000, 0.66406250, 0.46484375),
      vec3(0.06640625, 0.00000000, 0.53125000), vec3(0.00000000, 0.00000000, 0.26562500), vec3(0.06640625, 0.00000000, 0.53125000),vec3(0.00000000, 0.39843750, 0.99609375),
      vec3(0.39843750, 0.06640625, 0.00000000), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250),vec3(0.07031250, 0.07031250, 0.07031250),
      vec3(0.59765625, 0.79687500, 0.86328125), vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.26562500, 0.46484375, 0.66406250),vec3(0.59765625, 0.79687500, 0.86328125),
      vec3(0.46484375, 0.92968750, 0.66406250), vec3(0.13281250, 0.46484375, 0.26562500), vec3(0.46484375, 0.92968750, 0.66406250),vec3(0.99609375, 0.99609375, 0.86328125),
      vec3(0.06640625, 0.19921875, 0.19921875), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250),vec3(0.07031250, 0.07031250, 0.07031250),
      vec3(0.00000000, 0.00000000, 0.26562500), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250),vec3(0.07031250, 0.07031250, 0.07031250)
);

vec3 palettes[60] = vec3[](
    // source color                           darker color                              ligher color
    vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.13281250, 0.33203125, 0.33203125),
    vec3(0.79687500, 0.13281250, 0.00000000), vec3(0.39843750, 0.06640625, 0.00000000), vec3(0.79687500, 0.13281250, 0.00000000),
    vec3(0.46484375, 0.66406250, 0.00000000), vec3(0.13281250, 0.46484375, 0.26562500), vec3(0.46484375, 0.66406250, 0.00000000),
    vec3(0.79687500, 0.73046875, 0.00000000), vec3(0.53125000, 0.33203125, 0.00000000), vec3(0.79687500, 0.73046875, 0.00000000),
    vec3(0.00000000, 0.39843750, 0.99609375), vec3(0.00000000, 0.39843750, 0.99609375), vec3(0.59765625, 0.79687500, 0.86328125),
    vec3(0.92968750, 0.39843750, 0.00000000), vec3(0.39843750, 0.06640625, 0.00000000), vec3(0.92968750, 0.39843750, 0.00000000),
    vec3(0.00000000, 0.66406250, 0.46484375), vec3(0.00000000, 0.66406250, 0.46484375), vec3(0.46484375, 0.92968750, 0.66406250),
    vec3(0.99609375, 0.99609375, 0.86328125), vec3(0.59765625, 0.79687500, 0.86328125), vec3(0.99609375, 0.99609375, 0.86328125),
    vec3(0.26562500, 0.46484375, 0.66406250), vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.26562500, 0.46484375, 0.66406250),
    vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.19921875, 0.13281250, 0.06640625), vec3(0.53125000, 0.33203125, 0.00000000),
    vec3(0.53125000, 0.33203125, 0.00000000), vec3(0.53125000, 0.33203125, 0.00000000), vec3(0.86328125, 0.59765625, 0.19921875),
    vec3(0.86328125, 0.59765625, 0.19921875), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250),
    vec3(0.39843750, 0.00000000, 0.99609375), vec3(0.06640625, 0.00000000, 0.53125000), vec3(0.39843750, 0.00000000, 0.99609375),
    vec3(0.79687500, 0.13281250, 0.66406250), vec3(0.39843750, 0.06640625, 0.00000000), vec3(0.79687500, 0.13281250, 0.66406250),
    vec3(0.13281250, 0.46484375, 0.26562500), vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.13281250, 0.46484375, 0.26562500),
    vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.13281250, 0.33203125, 0.33203125), vec3(0.00000000, 0.66406250, 0.46484375),
    vec3(0.06640625, 0.00000000, 0.53125000), vec3(0.06640625, 0.00000000, 0.53125000), vec3(0.00000000, 0.39843750, 0.99609375),
    vec3(0.39843750, 0.06640625, 0.00000000), vec3(0.07031250, 0.07031250, 0.07031250), vec3(0.07031250, 0.07031250, 0.07031250),
    vec3(0.59765625, 0.79687500, 0.86328125), vec3(0.26562500, 0.46484375, 0.66406250), vec3(0.59765625, 0.79687500, 0.86328125),
    vec3(0.46484375, 0.92968750, 0.66406250), vec3(0.46484375, 0.92968750, 0.66406250), vec3(0.99609375, 0.99609375, 0.86328125)
);


vec3 dithermono(vec2 pos, float bri, vec4 maskCol) {
    //vec3 palette[2];
    //for(int i = 0; i < 60; i+=3) {
    //    if(distance(maskCol.rgb, palettes[i]) < 0.1) {
    //        palette[0] = palettes[i+1];
    //        palette[1] = palettes[i+2];
    //        break;
    //    }
    //}

    vec3 palette[3];
    for(int i = 0; i < 88; i+=4) {
        if(distance(maskCol.rgb, palettes2[i]) < 0.1) {
            palette[0] = palettes2[i+1];
            palette[1] = palettes2[i+2];
            palette[2] = palettes2[i+3];
            break;
        }
    }

    float bands = palette.length();

    int pixelSize = 1;
    pos = pos - mod(pos, pixelSize);
	float x = floor(mod(pos.x,  4.0*pixelSize))/pixelSize;
	float y = floor(mod(pos.y,  4.0*pixelSize))/pixelSize;
	float index = floor(x + y * bands);

	float limit = 0.0;
	float stepp = 1.0 / bands;
	/* float stepp = 2.0 / bands; */

    float matrix[16] = float[](
		0.0625, 0.5625, 0.1875, 0.6875,
        0.8125, 0.3125, 0.9375, 0.4375,
        0.25,   0.75,   0.125,  0.625,
        1.0,    0.5,    0.875,  0.375
    );

    limit = matrix[int(index)];
	float a = bri - mod(bri,stepp);
    float b = a + stepp;
	limit = limit/bands + a;
	float _out = a;
	if (bri > limit) { _out = b; };
    return palette[int(floor(_out*bands*0.99))];
}

void main() {
    /* vec4 texelColor = texture(texture0, fragTexCoord); */
    vec4 texelColor = vec4(1.0, 1.0, 1.0, 1.0);
    vec3 normal = normalize(fragNormal);
    vec3 light = -normalize(vec3(0.0,0.0,0.0) - vec3(1.0,1.0,1.0));
    vec4 maskColor = texture(mask, fragTexCoord);
    float bri = dot(normal, light);

    // basic toon shading
    //if (bri > 0) {
    //    bri = pow(bri, 0.5);
    //} else {
    //    bri = -pow(-bri, 0.5);
    //}
    //bri = (bri + 1.0)/2.0;
    bri = pow(bri, 0.5);

    // apply dithering
    finalColor = vec4(dithermono(gl_FragCoord.xy, bri, maskColor), 1.0);

    // for debugging
    //finalColor = vec4(vec3(bri), 1.0);
    //if (bri > 0.49 && bri < 0.51) {
    //    finalColor = vec4(1.0, 0.0, 0.0, 1.0);
    //};


    //finalColor = maskColor;
}
